{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import tensorflow as tf\n",
    "import tensorflow_hub as hub\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.manifold import TSNE\n",
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "from tensorflow.contrib.tensorboard.plugins import projector\n",
    "import os\n",
    "from scipy import spatial\n",
    "from collections import defaultdict\n",
    "tf.logging.set_verbosity(tf.logging.ERROR)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Using /var/folders/s_/bvqcbl7954v3yyk7yxn7bhnw0000gn/T/tfhub_modules to cache modules.\n"
     ]
    }
   ],
   "source": [
    "elmo = hub.Module(\"https://tfhub.dev/google/elmo/2\", trainable=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/nathanielschub/Desktop/MIDS/W266/smartThesaurus\n"
     ]
    }
   ],
   "source": [
    "#os.chdir('W266/smartThesaurus')\n",
    "!pwd\n",
    "sent_1= pd.read_csv('Code/sentence_generator/output.txt', sep = ',', names = ['pair', 'word', 'sentence'])\n",
    "sent_2= pd.read_csv('Code/sentence_generator/output_2.txt', sep = ',', names = ['pair', 'word', 'sentence'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances = []       \n",
    "\n",
    "for i in range(len(np.unique(sent_1.pair))):\n",
    "    pair_no = i\n",
    "\n",
    "    sents_1= np.asarray(sent_1.loc[sent_1['pair'] == i].sentence)\n",
    "    word_1 = np.unique(sent_1.loc()[sent_1['pair'] == i].word)[0]\n",
    "    word_1_indices = []\n",
    "    for sent in sents_1:\n",
    "        x = sent.split()\n",
    "        word_1_indices.append(x.index(word_1))\n",
    "\n",
    "    sents_2 = np.asarray(sent_2.loc[sent_2['pair'] == i].sentence)\n",
    "    word_2 = np.unique(sent_2.loc()[sent_1['pair'] == i].word)[0]\n",
    "    word_2_indices = []\n",
    "    for sent in sents_2:\n",
    "        x = sent.split()\n",
    "        word_2_indices.append(x.index(word_2))\n",
    "\n",
    "\n",
    "    embeddings_1 = elmo(sents_1,\n",
    "    signature=\"default\",\n",
    "    as_dict=True)[\"elmo\"] \n",
    "\n",
    "    embeddings_2 = elmo(sents_2,\n",
    "    signature=\"default\",\n",
    "    as_dict=True)[\"elmo\"] \n",
    "\n",
    "    init = tf.initialize_all_variables()\n",
    "    sess = tf.Session()\n",
    "    sess.run(init)\n",
    "    embed_1 = sess.run(embeddings_1)\n",
    "    embed_2 = sess.run(embeddings_2)\n",
    "\n",
    "    target_embeddings_1 = []\n",
    "    for i in range(len(embed_1)):\n",
    "        target_embeddings_1.append(embed_1[i][word_1_indices[i]])\n",
    "        mean_embedding_1 = np.mean(np.asarray(target_embeddings_1), axis = 0)\n",
    "\n",
    "    target_embeddings_2 = []\n",
    "    for i in range(len(embed_2)):\n",
    "        target_embeddings_2.append(embed_2[i][word_2_indices[i]])\n",
    "        mean_embedding_2 = np.mean(np.asarray(target_embeddings_2), axis = 0)\n",
    "\n",
    "    distance = spatial.distance.cosine(mean_embedding_1, mean_embedding_2)\n",
    "    distances.append((pair_no, distance))\n",
    "\n",
    "    if i%100==0:\n",
    "        print(i)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 0.25115305185317993), (2, 0.2510792016983032), (3, 0.508088618516922), (4, 0.342008113861084)]\n"
     ]
    }
   ],
   "source": [
    "print(distances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
